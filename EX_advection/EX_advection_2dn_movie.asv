%% Setup default parameters
Omg     = 0.1;
L       = 10;
N       = 2^7;
X       = linspace(-L,L,N+1);
dX      = X(2)-X(1);
X       = X(1:end-1);
Y       = X.';
[Xg,Yg] = meshgrid(X,Y);
U       = -Omg*Yg;
V       = Omg*Xg;

%% Define initial field
dT = 50*Omg/N;
T  = 0:dT:2*(2*pi/Omg);
Q0   = CalQAna(X,Y,0);
QFft = Q0;
QFd4 = Q0;
EFft = zeros(size(T));
EFd2 = zeros(size(T));
M = VideoWriter('advection.mp4','MPEG-4');
M.Quality    = 100;
M.FrameRate  = 30;
open(M)
figure(1)
clf;
subplot(1,2,1)
contourf(X,Y,QFft,-2:0.02:2,'linecolor','none'); 
colorbar; caxis([0 1]); axis equal
xlim([-L,L]); ylim([-L,L]);
subplot(1,2,2)
contourf(X,Y,QFft-CalQAna(X,Y,0),-2:0.02:2,'linecolor','none'); 
colorbar; caxis([0 1]); axis equal
xlim([-L,L]); ylim([-L,L]);
writeVideo(M,getframe(gcf));

%% Intergrating
for t = 2:length(T)
    QAna = CalQAna(X,Y,Omg*T(t));
    QFft = NIntgRk4(T(t-1),QFft,dT,@AdvFft,U,V,X,Y);
%   QFd4 = NIntgFd1(T(t-1),QFd4,dT,@AdvFd4,U,V,X,Y);
    EFft(t) = rms(QFft-QAna,"all")^2;
%   EFd2(t) = rms(QFft-QAna,"all")^2;
    EaFft(t) = (mean(QFft,"all")-mean(QAna,"all"))
    if mod(t,20) == 1
        subplot(1,2,1)
        contourf(X,Y,QFft,-2:0.02:2,'linecolor','none'); 
        colorbar; caxis([0 1]); axis equal
        xlim([-L,L]); ylim([-L,L]);
        subplot(1,2,2)
        contourf(X,Y,QFft-QAna,-2:0.02:2,'linecolor','none'); 
        colorbar; caxis([-1 1]); axis equal
        xlim([-L,L]); ylim([-L,L]);
        writeVideo(M,getframe(gcf));
    end
end

M.close;

%% Function
function Qt = AdvFft(~,Q,U,V,X,Y)
    Nx = length(X);
    Ny = length(Y);
    Qx = zeros(size(Q));
    Qy = zeros(size(Q));
    for i = 1:Ny
        Qx(i,:) = NDiffFft(X,Q(i,:));
    end
    for j = 1:Nx
        Qy(:,j) = NDiffFft(Y,Q(:,j)).'; 
    end
    Qt = -(U.*Qx+V.*Qy);
end
function Qt = AdvFd4(~,Q,U,V,X,Y)
    Nx = length(X);
    Ny = length(Y);
    Qx = zeros(size(Q));
    Qy = zeros(size(Q));
    for i = 1:Ny
        Qx(i,:) = NDiffFd4(X,Q(i,:));
    end
    for j = 1:Nx
        Qy(:,j) = NDiffFd4(Y,Q(:,j)).'; 
    end
    Qt = -(U.*Qx+V.*Qy);
end

function QAna = CalQAna(X,Y,phi)
    QAna = zeros(length(Y),length(X));
    R    = 10/3;
    Rx   = R*cos(phi);
    Ry   = R*sin(phi);
    s  = 0.6;
    for i = 1:length(X)
        for j = 1:length(Y)
            r = sqrt((X(i)-Rx)^2+(Y(j)-Ry)^2);
            if r/s < pi
                QAna(j,i) = (cos(r/s)+1);
            end
        end
    end
end